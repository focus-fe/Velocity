<?php
/*
 * Generated by PEG.js 0.8.0. with php-pegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace PhpVelocity;

/* Usefull functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists('PhpVelocity\\chr_unicode')) { function chr_unicode($code) { return mb_convert_encoding('&#' . $code . ';', 'UTF-8', 'HTML-ENTITIES');} }
/* peg_regex_test - multibyte regex test */
if (!function_exists('PhpVelocity\\peg_regex_test')) { function peg_regex_test($pattern, $string) { if (substr($pattern, -1) == 'i') return mb_eregi(substr($pattern, 1, -2), $string); else return mb_ereg(substr($pattern, 1, -1), $string);}}

/* Syntax error exception */
if (!class_exists("PhpVelocity\\SyntaxError", false)){
class SyntaxError extends \Exception
{
    public $expected;
    public $found;
    public $grammarOffset;
    public $grammarLine;
    public $grammarColumn;
    public $name;
    public function __construct($message, $expected, $found, $offset, $line, $column)
    {
        parent::__construct($message, 0, null);
        $this->expected = $expected;
        $this->found = $found;
        $this->grammarOffset = $offset;
        $this->grammarLine = $line;
        $this->grammarColumn = $column;
        $this->name = "SyntaxError";
    }
};}

class Parser{


    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = "";


    private function cleanup_state(){
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = "";

    }


    private function text() {
      return mb_substr($this->input, $this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_computePosDetails($pos) {
      $self = $this;
      $advance = function(&$details, $startPos, $endPos) use($self) {
        for ($p = $startPos; $p < $endPos; $p++) {
          $ch = mb_substr($self->input, $p, 1, "UTF-8");
          if ($ch === "\n") {
            if (!$details["seenCR"]) { $details["line"]++; }
            $details["column"] = 1;
            $details["seenCR"] = false;
          } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
            $details["line"]++;
            $details["column"] = 1;
            $details["seenCR"] = true;
          } else {
            $details["column"]++;
            $details["seenCR"] = false;
          }
        }
      };

      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $advance($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException($message, $expected, $pos) {
      $cleanupExpected = function (&$expected){
        $i = 1;

        usort($expected, function($a, $b) {
          if ($a["description"] < $b["description"]) {
            return -1;
          } else if ($a["description"] > $b["description"]) {
            return 1;
          } else {
            return 0;
          }
        });

        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      };

      $buildMessage = function ($expected, $found) {
        $stringEscape = function ($s) {
          $hex = function($ch) { return strtoupper(dechex(ord($ch[0])));};

            $s = str_replace("\\",   "\\\\", $s);
            $s = str_replace("\"",    "\\\"", $s);
            $s = str_replace('\x08', '\\b', $s);
            $s = str_replace('\t',   '\\t', $s);
            $s = str_replace('\n',   '\\n', $s);
            $s = str_replace('\f',   '\\f', $s);
            $s = str_replace('\r',   '\\r', $s);
            $s = preg_replace_callback('/[\\x00-\\x07\\x0B\\x0E\\x0F]/u', function($ch) use($hex) { return '\\x0' + $hex($ch[0]); }, $s);
            $s = preg_replace_callback('/[\\x10-\\x1F\\x80-\\xFF]/u',     function($ch) use($hex) { return '\\x'  + $hex($ch[0]); }, $s);
            return $s;
        };

        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? "\"" . $stringEscape($found) . "\"" : "end of input";

        return "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      };

      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < mb_strlen($this->input, "UTF-8") ? mb_substr($this->input, $pos, 1, "UTF-8") : null;

      if ($expected !== null) {
        $cleanupExpected($expected);
      }

      return new SyntaxError(
        $message !== null ? $message : $buildMessage($expected, $found),
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;
    private $peg_c90;
    private $peg_c91;
    private $peg_c92;
    private $peg_c93;
    private $peg_c94;
    private $peg_c95;
    private $peg_c96;
    private $peg_c97;
    private $peg_c98;
    private $peg_c99;
    private $peg_c100;
    private $peg_c101;
    private $peg_c102;
    private $peg_c103;
    private $peg_c104;
    private $peg_c105;
    private $peg_c106;
    private $peg_c107;
    private $peg_c108;
    private $peg_c109;
    private $peg_c110;
    private $peg_c111;
    private $peg_c112;
    private $peg_c113;
    private $peg_c114;
    private $peg_c115;
    private $peg_c116;
    private $peg_c117;
    private $peg_c118;
    private $peg_c119;
    private $peg_c120;
    private $peg_c121;
    private $peg_c122;
    private $peg_c123;
    private $peg_c124;
    private $peg_c125;
    private $peg_c126;
    private $peg_c127;
    private $peg_c128;
    private $peg_c129;
    private $peg_c130;
    private $peg_c131;
    private $peg_c132;
    private $peg_c133;
    private $peg_c134;
    private $peg_c135;
    private $peg_c136;
    private $peg_c137;
    private $peg_c138;
    private $peg_c139;
    private $peg_c140;
    private $peg_c141;
    private $peg_c142;
    private $peg_c143;
    private $peg_c144;
    private $peg_c145;
    private $peg_c146;
    private $peg_c147;
    private $peg_c148;
    private $peg_c149;
    private $peg_c150;
    private $peg_c151;
    private $peg_c152;
    private $peg_c153;
    private $peg_c154;
    private $peg_c155;
    private $peg_c156;
    private $peg_c157;
    private $peg_c158;
    private $peg_c159;
    private $peg_c160;
    private $peg_c161;
    private $peg_c162;
    private $peg_c163;
    private $peg_c164;
    private $peg_c165;
    private $peg_c166;
    private $peg_c167;
    private $peg_c168;
    private $peg_c169;
    private $peg_c170;
    private $peg_c171;
    private $peg_c172;
    private $peg_c173;
    private $peg_c174;
    private $peg_c175;
    private $peg_c176;
    private $peg_c177;
    private $peg_c178;
    private $peg_c179;
    private $peg_c180;
    private $peg_c181;
    private $peg_c182;
    private $peg_c183;
    private $peg_c184;
    private $peg_c185;
    private $peg_c186;
    private $peg_c187;
    private $peg_c188;
    private $peg_c189;
    private $peg_c190;
    private $peg_c191;
    private $peg_c192;
    private $peg_c193;
    private $peg_c194;
    private $peg_c195;
    private $peg_c196;
    private $peg_c197;
    private $peg_c198;
    private $peg_c199;

    private function peg_parsestart() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseStatements();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c0,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseStatements() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_parseStatement();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseStatement();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c3,$s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c1); }
      }

      return $s0;
    }

    private function peg_parseStatement() {

      $s0 = $this->peg_parseUnparsedText();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseComments();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseSetStatement();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseForeachStatement();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseIfStatement();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parseComment();
                if ($s1 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c4);
                }
                $s0 = $s1;
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseReferenceRender();
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parseRawText();
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseS_UNPARSED_BEGIN() {

      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c5) {
        $s0 = $this->peg_c5;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c6); }
      }

      return $s0;
    }

    private function peg_parseS_UNPARSED_END() {

      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c7) {
        $s0 = $this->peg_c7;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c8); }
      }

      return $s0;
    }

    private function peg_parseS_COMMENT() {

      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c9) {
        $s0 = $this->peg_c9;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c10); }
      }

      return $s0;
    }

    private function peg_parseS_COMMENTS_BEGIN() {

      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c11) {
        $s0 = $this->peg_c11;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c12); }
      }

      return $s0;
    }

    private function peg_parseS_COMMENTS_END() {

      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c13) {
        $s0 = $this->peg_c13;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c14); }
      }

      return $s0;
    }

    private function peg_parseS_SET() {

      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c15) {
        $s0 = $this->peg_c15;
        $this->peg_currPos += 4;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c16); }
      }

      return $s0;
    }

    private function peg_parseS_FOREACH() {

      if (mb_substr($this->input, $this->peg_currPos, 8, "UTF-8") === $this->peg_c17) {
        $s0 = $this->peg_c17;
        $this->peg_currPos += 8;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c18); }
      }

      return $s0;
    }

    private function peg_parseS_IF() {

      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c19) {
        $s0 = $this->peg_c19;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c20); }
      }

      return $s0;
    }

    private function peg_parseS_ELSEIF() {

      if (mb_substr($this->input, $this->peg_currPos, 7, "UTF-8") === $this->peg_c21) {
        $s0 = $this->peg_c21;
        $this->peg_currPos += 7;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c22); }
      }

      return $s0;
    }

    private function peg_parseS_ELSE() {

      if (mb_substr($this->input, $this->peg_currPos, 7, "UTF-8") === $this->peg_c23) {
        $s0 = $this->peg_c23;
        $this->peg_currPos += 7;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c24); }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c26) {
          $s1 = $this->peg_c26;
          $this->peg_currPos += 5;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c27); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $this->peg_silentFails++;
          if (peg_regex_test($this->peg_c29, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c30); }
          }
          $this->peg_silentFails--;
          if ($s3 === $this->peg_FAILED) {
            $s2 = $this->peg_c28;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c25;
          }
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      }

      return $s0;
    }

    private function peg_parseS_END() {

      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c31) {
        $s0 = $this->peg_c31;
        $this->peg_currPos += 4;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 6, "UTF-8") === $this->peg_c33) {
          $s0 = $this->peg_c33;
          $this->peg_currPos += 6;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c34); }
        }
      }

      return $s0;
    }

    private function peg_parseS_BEGIN() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
        $s0 = $this->peg_c35;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseS_UNPARSED_BEGIN();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseS_COMMENT();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseS_COMMENTS_BEGIN();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseS_SET();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseS_FOREACH();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseS_IF();
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseRawText() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_parseRawTextInner();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parseRawTextInner();
        }
      } else {
        $s1 = $this->peg_c25;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseS_BEGIN();
      }

      return $s0;
    }

    private function peg_parseRawTextInner() {

      if (peg_regex_test($this->peg_c37, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c38); }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s2 = $this->peg_parseS_BEGIN();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseS_ELSEIF();
          if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_parseS_ELSE();
            if ($s2 === $this->peg_FAILED) {
              $s2 = $this->peg_parseS_END();
            }
          }
        }
        $this->peg_silentFails--;
        if ($s2 === $this->peg_FAILED) {
          $s1 = $this->peg_c28;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_c25;
        }
        if ($s1 !== $this->peg_FAILED) {
          if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      }

      return $s0;
    }

    private function peg_parseUnparsedText() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_UNPARSED_BEGIN();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_c2;
        $s4 = $this->peg_parseUnparsedTextInner();
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          $s4 = $this->peg_parseUnparsedTextInner();
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseS_UNPARSED_END();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c40,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseUnparsedTextInner() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s2 = $this->peg_parseS_UNPARSED_END();
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = $this->peg_c28;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_c25;
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
          $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseComment() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_COMMENT();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseEOL();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = $this->peg_c28;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_c25;
        }
        if ($s4 !== $this->peg_FAILED) {
          if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
            $s5 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s5 = $this->peg_parseEOL();
          $this->peg_silentFails--;
          if ($s5 === $this->peg_FAILED) {
            $s4 = $this->peg_c28;
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c25;
          }
          if ($s4 !== $this->peg_FAILED) {
            if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
              $s5 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseEOL();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseComments() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_COMMENTS_BEGIN();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_parseCommentsInner();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseCommentsInner();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseS_COMMENTS_END();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c41);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseCommentsInner() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s2 = $this->peg_parseS_COMMENTS_END();
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = $this->peg_c28;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_c25;
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
          $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseIfStatement() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_IF();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseL_R_BRAC();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpression();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseR_R_BRAC();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseStatements();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_c2;
                    $s9 = $this->peg_parseElseIfStatement();
                    while ($s9 !== $this->peg_FAILED) {
                      $s8[] = $s9;
                      $s9 = $this->peg_parseElseIfStatement();
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parse_();
                      if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parseElseStatement();
                        if ($s10 === $this->peg_FAILED) {
                          $s10 = $this->peg_c28;
                        }
                        if ($s10 !== $this->peg_FAILED) {
                          $s11 = $this->peg_parse_();
                          if ($s11 !== $this->peg_FAILED) {
                            $s12 = $this->peg_parseS_END();
                            if ($s12 !== $this->peg_FAILED) {
                              $this->peg_reportedPos = $s0;
                              $s1 = call_user_func($this->peg_c43,$s3, $s6, $s8, $s10);
                              $s0 = $s1;
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_c25;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_c25;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c25;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c25;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c25;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c42); }
      }

      return $s0;
    }

    private function peg_parseElseIfStatement() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_ELSEIF();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseL_R_BRAC();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpression();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseR_R_BRAC();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseStatements();
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c44,$s3, $s6);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseElseStatement() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_ELSE();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseStatements();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c45,$s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseItemInArray() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
        $s1 = $this->peg_c35;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseIdentifier();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse__();
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c47) {
              $s4 = $this->peg_c47;
              $this->peg_currPos += 2;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c48); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse__();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseReferenceValue();
                if ($s6 === $this->peg_FAILED) {
                  $s6 = $this->peg_parseArrLiteral();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c49,$s2, $s6);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c46); }
      }

      return $s0;
    }

    private function peg_parseForeachStatement() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_FOREACH();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseL_R_BRAC();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseItemInArray();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseR_R_BRAC();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseStatements();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseS_END();
                      if ($s9 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c51,$s4, $s7);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c25;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c25;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c50); }
      }

      return $s0;
    }

    private function peg_parseReferenceInner() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c53) {
          $s4 = $this->peg_c53;
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c54); }
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseIdentifier();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c55) {
            $s4 = $this->peg_c55;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseExpression();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseR_S_BRAC();
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c57) {
              $s4 = $this->peg_c57;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parseExpression();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_c2;
                $s8 = $this->peg_currPos;
                $s9 = $this->peg_parse_();
                if ($s9 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
                    $s10 = $this->peg_c59;
                    $this->peg_currPos++;
                  } else {
                    $s10 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
                  }
                  if ($s10 !== $this->peg_FAILED) {
                    $s11 = $this->peg_parseExpression();
                    if ($s11 !== $this->peg_FAILED) {
                      $s9 = array($s9, $s10, $s11);
                      $s8 = $s9;
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_c25;
                    }
                  } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s8;
                  $s8 = $this->peg_c25;
                }
                while ($s8 !== $this->peg_FAILED) {
                  $s7[] = $s8;
                  $s8 = $this->peg_currPos;
                  $s9 = $this->peg_parse_();
                  if ($s9 !== $this->peg_FAILED) {
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
                      $s10 = $this->peg_c59;
                      $this->peg_currPos++;
                    } else {
                      $s10 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
                    }
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_parseExpression();
                      if ($s11 !== $this->peg_FAILED) {
                        $s9 = array($s9, $s10, $s11);
                        $s8 = $s9;
                      } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_c25;
                      }
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_c25;
                    }
                  } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_c25;
                  }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s6 = array($s6, $s7);
                  $s5 = $s6;
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c25;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c28;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseR_R_BRAC();
                if ($s6 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c53) {
            $s4 = $this->peg_c53;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c54); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseIdentifier();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c55) {
              $s4 = $this->peg_c55;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseExpression();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseR_S_BRAC();
                if ($s6 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c57) {
                $s4 = $this->peg_c57;
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
              }
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_currPos;
                $s6 = $this->peg_parseExpression();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_c2;
                  $s8 = $this->peg_currPos;
                  $s9 = $this->peg_parse_();
                  if ($s9 !== $this->peg_FAILED) {
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
                      $s10 = $this->peg_c59;
                      $this->peg_currPos++;
                    } else {
                      $s10 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
                    }
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_parseExpression();
                      if ($s11 !== $this->peg_FAILED) {
                        $s9 = array($s9, $s10, $s11);
                        $s8 = $s9;
                      } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_c25;
                      }
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_c25;
                    }
                  } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_c25;
                  }
                  while ($s8 !== $this->peg_FAILED) {
                    $s7[] = $s8;
                    $s8 = $this->peg_currPos;
                    $s9 = $this->peg_parse_();
                    if ($s9 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
                        $s10 = $this->peg_c59;
                        $this->peg_currPos++;
                      } else {
                        $s10 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
                      }
                      if ($s10 !== $this->peg_FAILED) {
                        $s11 = $this->peg_parseExpression();
                        if ($s11 !== $this->peg_FAILED) {
                          $s9 = array($s9, $s10, $s11);
                          $s8 = $s9;
                        } else {
                          $this->peg_currPos = $s8;
                          $s8 = $this->peg_c25;
                        }
                      } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_c25;
                      }
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_c25;
                    }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s6 = array($s6, $s7);
                    $s5 = $s6;
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c25;
                }
                if ($s5 === $this->peg_FAILED) {
                  $s5 = $this->peg_c28;
                }
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = $this->peg_parseR_R_BRAC();
                  if ($s6 !== $this->peg_FAILED) {
                    $s4 = array($s4, $s5, $s6);
                    $s3 = $s4;
                  } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c61,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c52); }
      }

      return $s0;
    }

    private function peg_parseReferenceBody() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c62) {
        $s1 = $this->peg_c62;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c63); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseReferenceInner();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseR_BRACE();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c64,$s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseReferenceInner();
      }

      return $s0;
    }

    private function peg_parseSetStatement() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseS_SET();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseL_R_BRAC();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
              $s4 = $this->peg_c35;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseReferenceBody();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c66) {
                    $s7 = $this->peg_c66;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c67); }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parseExpression();
                    if ($s8 !== $this->peg_FAILED) {
                      $s9 = $this->peg_parseR_R_BRAC();
                      if ($s9 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c68,$s5, $s8);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c25;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c25;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c65); }
      }

      return $s0;
    }

    private function peg_parseReference() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c35) {
        $s1 = $this->peg_c35;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c70) {
          $s2 = $this->peg_c70;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c71); }
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c28;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseReferenceBody();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c72,$s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c69); }
      }

      return $s0;
    }

    private function peg_parseReferenceRender() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseReference();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c74,$s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c73); }
      }

      return $s0;
    }

    private function peg_parseReferenceValue() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseReference();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c76,$s1);
      }
      $s0 = $s1;
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
      }

      return $s0;
    }

    private function peg_parseIdentifier() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c77, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c78); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        if (peg_regex_test($this->peg_c29, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c30); }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c29, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c30); }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c79);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseExpression() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseConditionalOrExpression();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c80,$s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseValLiteral() {

      $s0 = $this->peg_parseBoolLiteral();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseStringLiteral();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseNumberLiteral();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseArrLiteral();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseObjLiteral();
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseKv() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseStringLiteral();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c82) {
              $s4 = $this->peg_c82;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c83); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseValLiteral();
                if ($s6 === $this->peg_FAILED) {
                  $s6 = $this->peg_parseReferenceValue();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c84,$s2, $s6);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c81); }
      }

      return $s0;
    }

    private function peg_parseObjLiteral() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c62) {
        $s1 = $this->peg_c62;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c63); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseKv();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c28;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
              $s6 = $this->peg_c59;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseKv();
              if ($s7 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6, $s7);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c25;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
                $s6 = $this->peg_c59;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseKv();
                if ($s7 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c25;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseR_BRACE();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c86,$s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c85); }
      }

      return $s0;
    }

    private function peg_parseArrRange() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c55) {
        $s1 = $this->peg_c55;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseExpression();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c88) {
              $s4 = $this->peg_c88;
              $this->peg_currPos += 2;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c89); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseExpression();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseR_S_BRAC();
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c90,$s2, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c87); }
      }

      return $s0;
    }

    private function peg_parseArrLiteral() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c55) {
        $s1 = $this->peg_c55;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseExpression();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c28;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
              $s6 = $this->peg_c59;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseExpression();
              if ($s7 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6, $s7);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c25;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c59) {
                $s6 = $this->peg_c59;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseExpression();
                if ($s7 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c25;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseR_S_BRAC();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c92,$s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseArrRange();
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
      }

      return $s0;
    }

    private function peg_parsePrimaryExpression() {

      $s0 = $this->peg_parseValLiteral();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c93) {
          $s1 = $this->peg_c93;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c94); }
        }
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_c28;
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseReferenceValue();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c95,$s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c70) {
            $s1 = $this->peg_c70;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c71); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parsePrimaryExpression();
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c96,$s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if (peg_regex_test($this->peg_c97, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c98); }
            }
            if ($s1 === $this->peg_FAILED) {
              $s1 = $this->peg_c28;
            }
            if ($s1 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c57) {
                $s2 = $this->peg_c57;
                $this->peg_currPos++;
              } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
              }
              if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parseExpression();
                if ($s3 !== $this->peg_FAILED) {
                  $s4 = $this->peg_parseR_R_BRAC();
                  if ($s4 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c99,$s1, $s3);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c25;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseConditionalOrExpression() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseConditionalAndExpression();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c101) {
            $s5 = $this->peg_c101;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c102); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseConditionalAndExpression();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c101) {
              $s5 = $this->peg_c101;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c102); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseConditionalAndExpression();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c103,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c100); }
      }

      return $s0;
    }

    private function peg_parseConditionalAndExpression() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseEqualityExpression();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c105) {
            $s5 = $this->peg_c105;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c106); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseEqualityExpression();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c105) {
              $s5 = $this->peg_c105;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c106); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseEqualityExpression();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c107,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c104); }
      }

      return $s0;
    }

    private function peg_parseEqualityExpression() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseRelationalExpression();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c109) {
            $s5 = $this->peg_c109;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c110); }
          }
          if ($s5 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c111) {
              $s5 = $this->peg_c111;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseRelationalExpression();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c109) {
              $s5 = $this->peg_c109;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c110); }
            }
            if ($s5 === $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c111) {
                $s5 = $this->peg_c111;
                $this->peg_currPos += 2;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseRelationalExpression();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c113,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c108); }
      }

      return $s0;
    }

    private function peg_parseRelationalExpression() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseAdditiveExpression();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parse_();
        if ($s3 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c115) {
            $s4 = $this->peg_c115;
            $this->peg_currPos += 2;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
          }
          if ($s4 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c117) {
              $s4 = $this->peg_c117;
              $this->peg_currPos += 2;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c118); }
            }
            if ($s4 === $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c119) {
                $s4 = $this->peg_c119;
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c120); }
              }
              if ($s4 === $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c121) {
                  $s4 = $this->peg_c121;
                  $this->peg_currPos++;
                } else {
                  $s4 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c122); }
                }
              }
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAdditiveExpression();
              if ($s6 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5, $s6);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c25;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c28;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c123,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
      }

      return $s0;
    }

    private function peg_parseAdditiveExpression() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMultiplicativeExpression();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c125) {
            $s5 = $this->peg_c125;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c126); }
          }
          if ($s5 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c93) {
              $s5 = $this->peg_c93;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c94); }
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseMultiplicativeExpression();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c125) {
              $s5 = $this->peg_c125;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c126); }
            }
            if ($s5 === $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c93) {
                $s5 = $this->peg_c93;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c94); }
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseMultiplicativeExpression();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c127,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c124); }
      }

      return $s0;
    }

    private function peg_parseMultiplicativeExpression() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parsePrimaryExpression();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c129) {
            $s5 = $this->peg_c129;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c130); }
          }
          if ($s5 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c131) {
              $s5 = $this->peg_c131;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c132); }
            }
            if ($s5 === $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c133) {
                $s5 = $this->peg_c133;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c134); }
              }
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parsePrimaryExpression();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c25;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c129) {
              $s5 = $this->peg_c129;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c130); }
            }
            if ($s5 === $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c131) {
                $s5 = $this->peg_c131;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c132); }
              }
              if ($s5 === $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c133) {
                  $s5 = $this->peg_c133;
                  $this->peg_currPos++;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c134); }
                }
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parsePrimaryExpression();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c25;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c25;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c25;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c135,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c128); }
      }

      return $s0;
    }

    private function peg_parseStringLiteral() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseQuotation_mark();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_parseReferenceRender();
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_parseChar();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseQuotation_mark_escaped();
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseReferenceRender();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseChar();
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_parseQuotation_mark_escaped();
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseQuotation_mark();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c137,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseQuotation_mark_raw();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_c2;
          $s3 = $this->peg_parseChar();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseQuotation_mark_raw_escaped();
          }
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseChar();
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_parseQuotation_mark_raw_escaped();
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseQuotation_mark_raw();
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c138,$s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c25;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c136); }
      }

      return $s0;
    }

    private function peg_parseChar() {

      $s0 = $this->peg_parseUnescaped();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseEscape();
        if ($s1 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c139) {
            $s2 = $this->peg_c139;
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c140); }
          }
          if ($s2 === $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c131) {
              $s2 = $this->peg_c131;
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c132); }
            }
            if ($s2 === $this->peg_FAILED) {
              $s2 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c141) {
                $s3 = $this->peg_c141;
                $this->peg_currPos++;
              } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c142); }
              }
              if ($s3 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s2;
                $s3 = call_user_func($this->peg_c143);
              }
              $s2 = $s3;
              if ($s2 === $this->peg_FAILED) {
                $s2 = $this->peg_currPos;
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c144) {
                  $s3 = $this->peg_c144;
                  $this->peg_currPos++;
                } else {
                  $s3 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c145); }
                }
                if ($s3 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s2;
                  $s3 = call_user_func($this->peg_c146);
                }
                $s2 = $s3;
                if ($s2 === $this->peg_FAILED) {
                  $s2 = $this->peg_currPos;
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c147) {
                    $s3 = $this->peg_c147;
                    $this->peg_currPos++;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c148); }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s2;
                    $s3 = call_user_func($this->peg_c149);
                  }
                  $s2 = $s3;
                  if ($s2 === $this->peg_FAILED) {
                    $s2 = $this->peg_currPos;
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c150) {
                      $s3 = $this->peg_c150;
                      $this->peg_currPos++;
                    } else {
                      $s3 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c151); }
                    }
                    if ($s3 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s2;
                      $s3 = call_user_func($this->peg_c152);
                    }
                    $s2 = $s3;
                    if ($s2 === $this->peg_FAILED) {
                      $s2 = $this->peg_currPos;
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c153) {
                        $s3 = $this->peg_c153;
                        $this->peg_currPos++;
                      } else {
                        $s3 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c154); }
                      }
                      if ($s3 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s2;
                        $s3 = call_user_func($this->peg_c155);
                      }
                      $s2 = $s3;
                      if ($s2 === $this->peg_FAILED) {
                        $s2 = $this->peg_currPos;
                        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c156) {
                          $s3 = $this->peg_c156;
                          $this->peg_currPos++;
                        } else {
                          $s3 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c157); }
                        }
                        if ($s3 !== $this->peg_FAILED) {
                          $s4 = $this->peg_currPos;
                          $s5 = $this->peg_currPos;
                          $s6 = $this->peg_parseHEXDIG();
                          if ($s6 !== $this->peg_FAILED) {
                            $s7 = $this->peg_parseHEXDIG();
                            if ($s7 !== $this->peg_FAILED) {
                              $s8 = $this->peg_parseHEXDIG();
                              if ($s8 !== $this->peg_FAILED) {
                                $s9 = $this->peg_parseHEXDIG();
                                if ($s9 !== $this->peg_FAILED) {
                                  $s6 = array($s6, $s7, $s8, $s9);
                                  $s5 = $s6;
                                } else {
                                  $this->peg_currPos = $s5;
                                  $s5 = $this->peg_c25;
                                }
                              } else {
                                $this->peg_currPos = $s5;
                                $s5 = $this->peg_c25;
                              }
                            } else {
                              $this->peg_currPos = $s5;
                              $s5 = $this->peg_c25;
                            }
                          } else {
                            $this->peg_currPos = $s5;
                            $s5 = $this->peg_c25;
                          }
                          if ($s5 !== $this->peg_FAILED) {
                            $s5 = mb_substr($this->input, $s4, $this->peg_currPos - $s4, "UTF-8");
                          }
                          $s4 = $s5;
                          if ($s4 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s2;
                            $s3 = call_user_func($this->peg_c158,$s4);
                            $s2 = $s3;
                          } else {
                            $this->peg_currPos = $s2;
                            $s2 = $this->peg_c25;
                          }
                        } else {
                          $this->peg_currPos = $s2;
                          $s2 = $this->peg_c25;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c159,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      }

      return $s0;
    }

    private function peg_parseEscape() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c139) {
        $s0 = $this->peg_c139;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c140); }
      }

      return $s0;
    }

    private function peg_parseQuotation_mark() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c160) {
        $s0 = $this->peg_c160;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c161); }
      }

      return $s0;
    }

    private function peg_parseQuotation_mark_escaped() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseEscape();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c160) {
          $s2 = $this->peg_c160;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c161); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c162);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseQuotation_mark_raw() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c163) {
        $s0 = $this->peg_c163;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c164); }
      }

      return $s0;
    }

    private function peg_parseQuotation_mark_raw_escaped() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseEscape();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c163) {
          $s2 = $this->peg_c163;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c164); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c165);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseUnescaped() {

      if (peg_regex_test($this->peg_c166, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c167); }
      }

      return $s0;
    }

    private function peg_parsePositiveIntegerLiteral() {

      $s0 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c168, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c169); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        if (peg_regex_test($this->peg_c170, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c171); }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c170, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c171); }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parsePositiveFloatLiteral() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c172) {
        $s1 = $this->peg_c172;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c173); }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_parsePositiveIntegerLiteral();
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c53) {
          $s2 = $this->peg_c53;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c54); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          if (peg_regex_test($this->peg_c170, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c171); }
          }
          if ($s4 !== $this->peg_FAILED) {
            while ($s4 !== $this->peg_FAILED) {
              $s3[] = $s4;
              if (peg_regex_test($this->peg_c170, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c171); }
              }
            }
          } else {
            $s3 = $this->peg_c25;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c25;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseBoolLiteral() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c174) {
        $s1 = $this->peg_c174;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c175); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c176);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c177) {
          $s1 = $this->peg_c177;
          $this->peg_currPos += 5;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c178); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c179);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseNumberLiteral() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c93) {
        $s1 = $this->peg_c93;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c94); }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c28;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsePositiveFloatLiteral();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parsePositiveIntegerLiteral();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c180);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c172) {
          $s1 = $this->peg_c172;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c173); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c181);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseHEXDIG() {

      if (peg_regex_test($this->peg_c182, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c183); }
      }

      return $s0;
    }

    private function peg_parse___() {

      if (peg_regex_test($this->peg_c184, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c185); }
      }

      return $s0;
    }

    private function peg_parse__() {

      $this->peg_silentFails++;
      $s0 = $this->peg_c2;
      $s1 = $this->peg_parse___();
      if ($s1 !== $this->peg_FAILED) {
        while ($s1 !== $this->peg_FAILED) {
          $s0[] = $s1;
          $s1 = $this->peg_parse___();
        }
      } else {
        $s0 = $this->peg_c25;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c186); }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = $this->peg_c2;
      $s1 = $this->peg_parse___();
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parse___();
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c187); }
      }

      return $s0;
    }

    private function peg_parseL_R_BRAC() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c57) {
          $s2 = $this->peg_c57;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c58); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseR_R_BRAC() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c188) {
          $s2 = $this->peg_c188;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c189); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseL_S_BRAC() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c55) {
          $s2 = $this->peg_c55;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c56); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseR_S_BRAC() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c190) {
          $s2 = $this->peg_c190;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c191); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseL_BRACE() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c62) {
          $s2 = $this->peg_c62;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c63); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseR_BRACE() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c192) {
          $s2 = $this->peg_c192;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c193); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c25;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

    private function peg_parseEOL() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c194) {
        $s0 = $this->peg_c194;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c195); }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c196) {
          $s0 = $this->peg_c196;
          $this->peg_currPos += 2;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c197); }
        }
        if ($s0 === $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c198) {
            $s0 = $this->peg_c198;
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c199); }
          }
        }
      }

      return $s0;
    }

    private function peg_parseEOF() {

      $s0 = $this->peg_currPos;
      $this->peg_silentFails++;
      if (mb_strlen($this->input, "UTF-8") > $this->peg_currPos) {
        $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
      }
      $this->peg_silentFails--;
      if ($s1 === $this->peg_FAILED) {
        $s0 = $this->peg_c28;
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c25;
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();
    $this->input = $input;
    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = function($s) {
        return $s;
    };
    $this->peg_c1 = array("type" => "other", "description" => "0" );
    $this->peg_c2 = array();
    $this->peg_c3 = function($s) {
        return array('s' => $s, '_' => '0');
    };
    $this->peg_c4 = function() { return ''; };
    $this->peg_c5 = "#[[";
    $this->peg_c6 = array( "type" => "literal", "value" => "#[[", "description" => "\"#[[\"" );
    $this->peg_c7 = "]]#";
    $this->peg_c8 = array( "type" => "literal", "value" => "]]#", "description" => "\"]]#\"" );
    $this->peg_c9 = "##";
    $this->peg_c10 = array( "type" => "literal", "value" => "##", "description" => "\"##\"" );
    $this->peg_c11 = "#*";
    $this->peg_c12 = array( "type" => "literal", "value" => "#*", "description" => "\"#*\"" );
    $this->peg_c13 = "*#";
    $this->peg_c14 = array( "type" => "literal", "value" => "*#", "description" => "\"*#\"" );
    $this->peg_c15 = "#set";
    $this->peg_c16 = array( "type" => "literal", "value" => "#set", "description" => "\"#set\"" );
    $this->peg_c17 = "#foreach";
    $this->peg_c18 = array( "type" => "literal", "value" => "#foreach", "description" => "\"#foreach\"" );
    $this->peg_c19 = "#if";
    $this->peg_c20 = array( "type" => "literal", "value" => "#if", "description" => "\"#if\"" );
    $this->peg_c21 = "#elseif";
    $this->peg_c22 = array( "type" => "literal", "value" => "#elseif", "description" => "\"#elseif\"" );
    $this->peg_c23 = "#{else}";
    $this->peg_c24 = array( "type" => "literal", "value" => "#{else}", "description" => "\"#{else}\"" );
    $this->peg_c25 = $this->peg_FAILED;
    $this->peg_c26 = "#else";
    $this->peg_c27 = array( "type" => "literal", "value" => "#else", "description" => "\"#else\"" );
    $this->peg_c28 = null;
    $this->peg_c29 = "/^[0-9a-zA-Z_-]/";
    $this->peg_c30 = array( "type" => "class", "value" => "[0-9a-zA-Z_\\-]", "description" => "[0-9a-zA-Z_\\-]" );
    $this->peg_c31 = "#end";
    $this->peg_c32 = array( "type" => "literal", "value" => "#end", "description" => "\"#end\"" );
    $this->peg_c33 = "#{end}";
    $this->peg_c34 = array( "type" => "literal", "value" => "#{end}", "description" => "\"#{end}\"" );
    $this->peg_c35 = "$";
    $this->peg_c36 = array( "type" => "literal", "value" => "$", "description" => "\"$\"" );
    $this->peg_c37 = "/^[^\\\$#]/";
    $this->peg_c38 = array( "type" => "class", "value" => "[^\$#]", "description" => "[^\$#]" );
    $this->peg_c39 = array("type" => "any", "description" => "any character" );
    $this->peg_c40 = function($t) {
        return $t;
    };
    $this->peg_c41 = function() {
        return '';
    };
    $this->peg_c42 = array("type" => "other", "description" => "1" );
    $this->peg_c43 = function($e,$s,$elifs,$el) {
        $re = array(
            'e'     => $e,
            's'     => $s['s'],
            '_'     => '1'
        );
        if (!empty($elifs)) $re['elifs'] = $elifs;
        if (!empty($el)) $re['el'] = $el;
        return $re;
    };
    $this->peg_c44 = function($e,$s) {
        return array('e' => $e, 's' => $s['s']);
    };
    $this->peg_c45 = function($s) { return $s['s']; };
    $this->peg_c46 = array("type" => "other", "description" => "2" );
    $this->peg_c47 = "in";
    $this->peg_c48 = array( "type" => "literal", "value" => "in", "description" => "\"in\"" );
    $this->peg_c49 = function($id,$list) {
        return array(
            'id'   => $id,
            'data' => $list,
            '_'    => '2'
        );
    };
    $this->peg_c50 = array("type" => "other", "description" => "3" );
    $this->peg_c51 = function($it,$s) {
        return array(
            'it' => $it,
            's'  => $s['s'],
            '_'  => '3'
        );
    };
    $this->peg_c52 = array("type" => "other", "description" => "4" );
    $this->peg_c53 = ".";
    $this->peg_c54 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c55 = "[";
    $this->peg_c56 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c57 = "(";
    $this->peg_c58 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c59 = ",";
    $this->peg_c60 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c61 = function($main,$tail) {
        $tails = array();
        $tails[] = $main;
        foreach ($tail as $i) {
            if ($i[0] === '.') {
                $tails[] = array(
                    'type'  => 1,
                    'value' => $i[1]
                );
            } elseif ($i[0] === '[') {
                $tails[] = array(
                    'type'  => 2,
                    'value' => $i[1]
                );
            } elseif ($i[0] === '(') {
                $params = array();
                if (!empty($i[1])) {
                    $ps = $i[1];
                    $params[] = $ps[0];
                    if (!empty($ps[1])) {
                        foreach ($ps[1] as $j) {
                            $params[] = $j[2];
                        }
                    }
                }
                $tails[] = array(
                    'type'  => 3,
                    'value' => $params
                );
            }
        }
        return $tails;
    };
    $this->peg_c62 = "{";
    $this->peg_c63 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c64 = function($ref) { return $ref; };
    $this->peg_c65 = array("type" => "other", "description" => "5" );
    $this->peg_c66 = "=";
    $this->peg_c67 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c68 = function($body,$v) {
        return array(
            'body' => $body,
            'v'    => $v,
            '_'    => '5'
        );
    };
    $this->peg_c69 = array("type" => "other", "description" => "6" );
    $this->peg_c70 = "!";
    $this->peg_c71 = array( "type" => "literal", "value" => "!", "description" => "\"!\"" );
    $this->peg_c72 = function($bang,$body) {
        $re = array(
            'body' => $body,
            '_'    => '6'
        );
        if (!empty($bang)) $re['bang'] = true;
        return $re;
    };
    $this->peg_c73 = array("type" => "other", "description" => "7" );
    $this->peg_c74 = function($ref) {
        $ref['text'] = $this->text();
        $ref['_'] = '7';
        return $ref;
    };
    $this->peg_c75 = array("type" => "other", "description" => "8" );
    $this->peg_c76 = function($ref) {
        $ref['_'] = '8';
        return $ref;
    };
    $this->peg_c77 = "/^[a-zA-Z]/";
    $this->peg_c78 = array( "type" => "class", "value" => "[a-zA-Z]", "description" => "[a-zA-Z]" );
    $this->peg_c79 = function() { return $this->text(); };
    $this->peg_c80 = function($e) { return $e; };
    $this->peg_c81 = array("type" => "other", "description" => "9" );
    $this->peg_c82 = ":";
    $this->peg_c83 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c84 = function($k,$v) {
        return array(
            'key' => $k,
            'val' => $v
        );
    };
    $this->peg_c85 = array("type" => "other", "description" => "10" );
    $this->peg_c86 = function($head,$tail) {
        $tails = array();
        if (isset($head)) $tails[] = $head;
        if (count($tail) > 0) {
            foreach ($tail as $t) {
                $tails[] = $t[2];
            }
        }
        $re = array(
            '_' => '10'
        );
        if (count($tails) > 0) {
            $re['tail'] = $tails;
        }
        return $re;
    };
    $this->peg_c87 = array("type" => "other", "description" => "11" );
    $this->peg_c88 = "..";
    $this->peg_c89 = array( "type" => "literal", "value" => "..", "description" => "\"..\"" );
    $this->peg_c90 = function($start,$end) {
        return array(
            'startExp' => $start,
            'endExp'   => $end,
            '_'        => '11'
        );
    };
    $this->peg_c91 = array("type" => "other", "description" => "12" );
    $this->peg_c92 = function($head,$tail) {
        $tails = array();
        if (isset($head)) $tails[] = $head;
        if (count($tail) > 0) {
            foreach ($tail as $t) {
                $tails[] = $t[2];
            }
        }
        $re = array(
            '_' => '12'
        );
        if (count($tails) > 0) {
            $re['tail'] = $tails;
        }
        return $re;
    };
    $this->peg_c93 = "-";
    $this->peg_c94 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c95 = function($s1,$r) {
        if (!empty($s1)) $r['_'] = '13';
        return $r;
    };
    $this->peg_c96 = function($p) {
        return array(
            'p' => $p,
            '_' => '14'
        );
    };
    $this->peg_c97 = "/^[!-]/";
    $this->peg_c98 = array( "type" => "class", "value" => "[!\\-]", "description" => "[!\\-]" );
    $this->peg_c99 = function($s2,$e) {
        return empty($s2) ? $e : array(
            's'   => $s2,
            'exp' => $e,
            '_'   => '15'
        );
    };
    $this->peg_c100 = array("type" => "other", "description" => "16" );
    $this->peg_c101 = "||";
    $this->peg_c102 = array( "type" => "literal", "value" => "||", "description" => "\"||\"" );
    $this->peg_c103 = function($head,$tail) {
        if (empty($tail)) return $head;
        return array(
            'head' => $head,
            'tail' => $tail,
            '_'    => '16'
        );
    };
    $this->peg_c104 = array("type" => "other", "description" => "17" );
    $this->peg_c105 = "&&";
    $this->peg_c106 = array( "type" => "literal", "value" => "&&", "description" => "\"&&\"" );
    $this->peg_c107 = function($head,$tail) {
        if (empty($tail)) return $head;
        return array(
            'head' => $head,
            'tail' => $tail,
            '_'    => '17'
        );
    };
    $this->peg_c108 = array("type" => "other", "description" => "18" );
    $this->peg_c109 = "==";
    $this->peg_c110 = array( "type" => "literal", "value" => "==", "description" => "\"==\"" );
    $this->peg_c111 = "!=";
    $this->peg_c112 = array( "type" => "literal", "value" => "!=", "description" => "\"!=\"" );
    $this->peg_c113 = function($head,$tail) {
        if (empty($tail)) return $head;
        return array(
            'head' => $head,
            'tail' => $tail,
            '_'    => '18'
        );
    };
    $this->peg_c114 = array("type" => "other", "description" => "19" );
    $this->peg_c115 = "<=";
    $this->peg_c116 = array( "type" => "literal", "value" => "<=", "description" => "\"<=\"" );
    $this->peg_c117 = ">=";
    $this->peg_c118 = array( "type" => "literal", "value" => ">=", "description" => "\">=\"" );
    $this->peg_c119 = "<";
    $this->peg_c120 = array( "type" => "literal", "value" => "<", "description" => "\"<\"" );
    $this->peg_c121 = ">";
    $this->peg_c122 = array( "type" => "literal", "value" => ">", "description" => "\">\"" );
    $this->peg_c123 = function($head,$tail) {
        if (empty($tail)) return $head;
        return array(
            'head' => $head,
            'tail' => $tail,
            '_'    => '19'
        );
    };
    $this->peg_c124 = array("type" => "other", "description" => "20" );
    $this->peg_c125 = "+";
    $this->peg_c126 = array( "type" => "literal", "value" => "+", "description" => "\"+\"" );
    $this->peg_c127 = function($head,$tail) {
        if (empty($tail)) return $head;
        return array(
            'head' => $head,
            'tail' => $tail,
            '_'    => '20'
        );
    };
    $this->peg_c128 = array("type" => "other", "description" => "21" );
    $this->peg_c129 = "*";
    $this->peg_c130 = array( "type" => "literal", "value" => "*", "description" => "\"*\"" );
    $this->peg_c131 = "/";
    $this->peg_c132 = array( "type" => "literal", "value" => "/", "description" => "\"/\"" );
    $this->peg_c133 = "%";
    $this->peg_c134 = array( "type" => "literal", "value" => "%", "description" => "\"%\"" );
    $this->peg_c135 = function($head,$tail) {
        if (empty($tail)) return $head;
        return array(
            'head' => $head,
            'tail' => $tail,
            '_'    => '21'
        );
    };
    $this->peg_c136 = array("type" => "other", "description" => "22" );
    $this->peg_c137 = function($chars) {
        return array(
            'parts' => $chars,
            '_'     => '22'
        );
    };
    $this->peg_c138 = function($chars_raw) {
        return array(
            'parts' => $chars_raw,
            '_'     => '22'
        );
    };
    $this->peg_c139 = "\\";
    $this->peg_c140 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c141 = "b";
    $this->peg_c142 = array( "type" => "literal", "value" => "b", "description" => "\"b\"" );
    $this->peg_c143 = function() { return "\b"; };
    $this->peg_c144 = "f";
    $this->peg_c145 = array( "type" => "literal", "value" => "f", "description" => "\"f\"" );
    $this->peg_c146 = function() { return "\f"; };
    $this->peg_c147 = "n";
    $this->peg_c148 = array( "type" => "literal", "value" => "n", "description" => "\"n\"" );
    $this->peg_c149 = function() { return "\n"; };
    $this->peg_c150 = "r";
    $this->peg_c151 = array( "type" => "literal", "value" => "r", "description" => "\"r\"" );
    $this->peg_c152 = function() { return "\r"; };
    $this->peg_c153 = "t";
    $this->peg_c154 = array( "type" => "literal", "value" => "t", "description" => "\"t\"" );
    $this->peg_c155 = function() { return "\t"; };
    $this->peg_c156 = "u";
    $this->peg_c157 = array( "type" => "literal", "value" => "u", "description" => "\"u\"" );
    $this->peg_c158 = function($digits) {
            return chr_unicode(intval($digits, 16));
        };
    $this->peg_c159 = function($sequence) { return $sequence; };
    $this->peg_c160 = "\"";
    $this->peg_c161 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c162 = function() { return '"'; };
    $this->peg_c163 = "'";
    $this->peg_c164 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c165 = function() { return "'"; };
    $this->peg_c166 = "/^[^\\0-\\x1F\"\\\\]/";
    $this->peg_c167 = array( "type" => "class", "value" => "[^\\0-\\x1F\"\\\\]", "description" => "[^\\0-\\x1F\"\\\\]" );
    $this->peg_c168 = "/^[1-9]/";
    $this->peg_c169 = array( "type" => "class", "value" => "[1-9]", "description" => "[1-9]" );
    $this->peg_c170 = "/^[0-9]/";
    $this->peg_c171 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c172 = "0";
    $this->peg_c173 = array( "type" => "literal", "value" => "0", "description" => "\"0\"" );
    $this->peg_c174 = "true";
    $this->peg_c175 = array( "type" => "literal", "value" => "true", "description" => "\"true\"" );
    $this->peg_c176 = function() { return true; };
    $this->peg_c177 = "false";
    $this->peg_c178 = array( "type" => "literal", "value" => "false", "description" => "\"false\"" );
    $this->peg_c179 = function() { return false; };
    $this->peg_c180 = function() { return floatval($this->text()); };
    $this->peg_c181 = function() { return 0; };
    $this->peg_c182 = "/^[0-9a-f]/i";
    $this->peg_c183 = array( "type" => "class", "value" => "[0-9a-f]i", "description" => "[0-9a-f]i" );
    $this->peg_c184 = "/^[ \\t\\n\\r\\x0B\\f]/";
    $this->peg_c185 = array( "type" => "class", "value" => "[ \\t\\n\\r\\x0B\\f]", "description" => "[ \\t\\n\\r\\x0B\\f]" );
    $this->peg_c186 = array("type" => "other", "description" => "whitespaces" );
    $this->peg_c187 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c188 = ")";
    $this->peg_c189 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c190 = "]";
    $this->peg_c191 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c192 = "}";
    $this->peg_c193 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c194 = "\n";
    $this->peg_c195 = array( "type" => "literal", "value" => "\n", "description" => "\"\\n\"" );
    $this->peg_c196 = "\r\n";
    $this->peg_c197 = array( "type" => "literal", "value" => "\r\n", "description" => "\"\\r\\n\"" );
    $this->peg_c198 = "\r";
    $this->peg_c199 = array( "type" => "literal", "value" => "\r", "description" => "\"\\r\"" );

    $peg_startRuleFunctions = array( 'start' => array($this, "peg_parsestart") );
    $peg_startRuleFunction  = array($this, "peg_parsestart");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);
    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === mb_strlen($input, "UTF-8")) {
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < mb_strlen($input, "UTF-8")) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      throw $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
    }
  }

};

class executor_factory {
    static private function bool_of_value ($v) {
        return !empty($v) || $v === 0 || $v === '';
    }
    static private function type_of_value ($v) {
        if (is_string($v)) return 1;
        if (is_array($v))  return 2;
        if (is_object($v)) return 3;
        return 0;
    }
    static private function is_assoc (array $arr) {
        if (array() === $arr) return false;
        return array_keys($arr) !== range(0, count($arr) - 1);
    }
    static private function key_or_property_exists ($v, $key) {
        if (is_numeric($key)) $key = (int)$key;
        return is_array($v) ? array_key_exists($key, $v) : property_exists($v, $key);
    }
    static private function & ref_of_elem (&$v, $key) {
        if (is_numeric($key)) $key = (int)$key;
        $re = is_array($v) ? $v[$key] : $v->{$key};
        return $re;
    }
    static private function stringify ($v) {
        $vtype = self::type_of_value($v);
        if ($vtype === 2 || $vtype === 3) {
            $vs = array();
            $numeric = ($vtype === 2 && !self::is_assoc($v));
            foreach ($v as $key => $item) {
                $vs[] = ($numeric ? '' : ($key . '=')) . self::stringify($item);
            }
            return $numeric ? ('[' . join(', ', $vs) . ']') : ('{' . join(', ', $vs) . '}');
        }
        if (is_bool($v)) return $v === true ? 'true' : 'false';
        if (is_null($v)) return 'null';
        return (string)$v;
    }
    static private function set_value_by_ref (&$scope, $keys, $v = null) {
        $is_set = func_num_args() > 2;
        $main = $keys[0];
        $len = count($keys);
        $error = false;
        $data = &$scope['$this'];
        $ref = $main;
        $val = null;

        $data_type = self::type_of_value($data);
        if (($data_type !== 2 && $data_type !== 3)
            || ($data_type === 2 && !isset($data[$ref]))
            || ($data_type === 3 && !isset($data->{$ref}))) {
            unset($data);
            $data = &$scope;
            $ref = '$'.$main;
            $data_type = self::type_of_value($data);
        }
        if ($data_type === 2) {
            $val = &$data[$ref];
        } elseif ($data_type === 3) {
            $val = &$data->{$ref};
        } else {
            return array(
                'code' => 0,
                'msg' => 'Scope data error.',
                'value' => ''
            );
        }

        if ($len > 1) {
            $key = null;
            $val_type = null;
            $first_key = true;
            foreach ($keys as $key) {
                if ($first_key) {
                    $first_key = false;
                    continue;
                }
                $val_type = self::type_of_value($val);
                $data_type = self::type_of_value($data);
                if ($key['type'] === 3
                    && ($ref === 'get' || $ref === 'keySet' || $ref === 'substring'
                    || $ref === 'length' || $ref === 'size')) {
                    $wrong_type = false;
                    switch ($ref) {
                        case 'get':
                            if (($data_type !== 2 && $data_type !== 3)
                                || 1 !== count($key['value'])) {
                                $wrong_type = true;
                            } else {
                                $ref = $key['value'][0];
                                unset($val);
                                if (self::key_or_property_exists($data, $ref)) {
                                    $val = & self::ref_of_elem($data, $ref);
                                } else {
                                    $val = null;
                                }
                            }
                            break;
                        case 'keySet':
                            if (($data_type !== 2 && $data_type !== 3)
                                || 0 !== count($key['value'])) {
                                $wrong_type = true;
                            } else {
                                $props = array();
                                foreach ($data as $pk => $pv) {
                                    $props[] = $pk;
                                }
                                return array(
                                    'code' => 1,
                                    'value' => $props
                                );
                            }
                            break;
                        case 'substring':
                            if ($data_type !== 1) {
                                $wrong_type = true;
                            } else {
                                $param_count = count($key['value']);
                                if ($param_count !== 1 && $param_count !== 2) {
                                    $wrong_type = true;
                                } else {
                                    $_this = $data;
                                    $ref = null;
                                    unset($val);
                                    if ($param_count === 1) {
                                        $val = mb_substr($_this, $key['value'][0]);
                                    } else {
                                        $val = mb_substr($_this, $key['value'][0], $key['value'][1] - $key['value'][0]);
                                    }
                                    unset($data);
                                    $data = $val;
                                }
                            }
                            break;
                        case 'length':
                            if ($data_type !== 1) {
                                $wrong_type = true;
                            } else {
                                $param_count = count($key['value']);
                                if ($param_count !== 0) {
                                    $wrong_type = true;
                                } else {
                                    $_this = $data;
                                    $ref = null;
                                    unset($val);
                                    $val = mb_strlen($_this);
                                    unset($data);
                                    $data = $val;
                                }
                            }
                            break;
                        case 'size':
                            if ($data_type !== 2) {
                                $wrong_type = true;
                            } else {
                                $param_count = count($key['value']);
                                if ($param_count !== 0) {
                                    $wrong_type = true;
                                } else {
                                    $_this = $data;
                                    $ref = null;
                                    unset($val);
                                    $val = count($_this);
                                    unset($data);
                                    $data = $val;
                                }
                            }
                            break;
                        default:
                            return array(
                                'code' => 0,
                                'msg' => "Undefined method '" . $ref . "'.",
                                'value' => ''
                            );
                    }
                    if ($wrong_type) {
                        return array(
                            'code' => 0,
                            'msg' => "Something wrong with method '" . $ref . "'.",
                            'value' => ''
                        );
                    }
                    continue;
                }
                if (($key['type'] === 1 || $key['type'] === 2) && ($val_type === 2 || $val_type === 3)) {
                    unset($data);
                    $data = &$val;
                    $ref = $key['value'];
                    unset($val);
                    if (self::key_or_property_exists($data, $ref)) {
                        $val = & self::ref_of_elem($data, $ref);
                    } else {
                        $val = null;
                    }
                    continue;
                } elseif ($val_type === 1 && $key['type'] === 1) { // string: substring, length
                    unset($data);
                    $data = $val;
                    $ref = $key['value'];
                    unset($val);
                    $val = null;
                    continue;
                } else {
                    $error = true;
                    break;
                }
            }
            if ($error) {
                return array(
                    'code' => 0,
                    'msg' => 'error',
                    'value' => ''
                );
            }
        }
        if ($is_set) {
            if ($ref === null) {
                return array(
                    'code' => 0,
                    'msg' => 'cannot set a result of a function!',
                    'value' => ''
                );
            }
            $data_type = self::type_of_value($data);
            if ($data_type === 2) {
                $data[$ref] = $v;
            } elseif ($data_type === 3) {
                $data->{$ref} = $v;
            } else {
                return array(
                    'code' => 0,
                    'msg' => "cannot set property $ref of non-array or non-object value" . var_dump($data),
                    'value' => ''
                );
            }
            unset($val);
            $val = $v;
        }

        return array(
            'code' => 1,
            'value' => $val
        );
    }

    static private $console = false;
    static private $node_type = '_';
    private $scope;

    function __construct () {
        $this->scope = array(
            '$this' => array()
        );
        if (method_exists($this, $f = '__construct' . func_num_args())) {
            call_user_func_array(array($this, $f), func_get_args());
        }
    }

    function __construct1 ($data) {
        $this->set_data($data, true);
    }

    public function get_data () {
        return $this->scope;
    }

    public function set_data ($data, $clear = false) {
        $data = array(
            '$this' => !empty($data) ? $data : array()
        );
        if ($clear === true) {
            $this->scope = $data;
        } else {
            $this->scope = array_merge($this->scope, $data);
        }
    }

    public function run ($e) {
        if (!is_array($e) && !is_object($e)) {
            return $e;
        }
        $v = $e[self::$node_type];
        if (!is_string($v)) return $e;
        $v = '_'.$v;
        if (!method_exists($this, $v)) return '';
        return $this->{$v}($e);
    }

    private function concat ($s) {
        $re = '';
        foreach ($s as $statement) {
            $re .= $this->run($statement);
        }
        return $re;
    }

    private function _0 ($e) {
        return $this->concat($e['s']);
    }
    private function _1 ($e) {
        if (self::bool_of_value($this->run($e['e']))) {
            return $this->concat($e['s']);
        }
        if (!empty($e['elifs'])) {
            foreach ($e['elifs'] as $elif) {
                if (self::bool_of_value($this->run($elif['e']))) {
                    return $this->concat($elif['s']);
                }
            }
        }
        return !empty($e['el']) ? $this->concat($e['el']) : '';
    }
    private function _2 ($e) {
        $this->scope['$foreach'] = array('count' => -1);
        $this->scope['$velocityCount'] = -1;
        $list = $this->run($e['data']);
        return array(
            'error' => !is_array($list),
            'key' => $e['id'],
            'dataset' => $list
        );
    }
    private function _3 ($e) {
        $iia = $this->run($e['it']);
        if ($iia['error']) {
            if (self::$console) echo "cannot iterate " . var_dump($iia['dataset']) . "\n";
            return '';
        }

        $re = '';
        $data = $iia['dataset'];
        foreach ($data as $key => $value) {
            $this->scope['$foreach']['count'] = 1 + $key;
            $this->scope['$velocityCount'] = 1 + $key;
            $this->scope['$' . $iia['key']] = $value;
            $re .= $this->concat($e['s']);
        }

        return $re;
    }
    private function _4 ($keys) {
        $re = array();
        $re[] = $keys[0];
        if (count($keys) > 0) {
            $first_key = true;
            foreach ($keys as $key => $t) {
                if ($first_key) {
                    $first_key = false;
                    continue;
                }
                $v = null;
                if ($t['type'] === 2) {
                    $v = $this->run($t['value']);
                } elseif ($t['type'] === 3) {
                    $v = array();
                    foreach ($t['value'] as $param) {
                        $v[] = $this->run($param);
                    }
                } else {
                    $v = $t['value'];
                }
                $re[] = array(
                    'type' => $t['type'],
                    'value' => $v
                );
            }
        }
        return $re;
    }
    private function _5 ($e) {
        self::set_value_by_ref($this->scope, $this->_4($e['body']), $this->run($e['v']));
        return '';
    }
    private function _6 ($e) {
        $re = self::set_value_by_ref($this->scope, $this->_4($e['body']));
        $re['bang'] = isset($e['bang']);
        return $re;
    }
    private function _7 ($e) {
        $r = $this->_6($e);
        if ($r['code'] === 0) {
            if (self::$console) echo $r['msg'] . "\n";
            return $r['bang'] ? '' : $e['text'];
        }

        $val_is_null = !array_key_exists('value', $r) || $r['value'] === null;
        return ($r['bang'] && $val_is_null)
            ? '' : ($val_is_null ? $e['text'] : self::stringify($r['value']));
    }
    private function _8 ($e) {
        $r = $this->_6($e);
        if ($r['code'] === 0) {
            if (self::$console) echo $r['msg'] . "\n";
            return null;
        }
        return $r['value'];
    }
    private function _10 ($e) {
        $re = array();
        if (isset($e['tail'])) {
            foreach ($e['tail'] as $t) {
                $re[$this->run($t['key'])] = $this->run($t['val']);
            }
        }
        return $re;
    }
    private function _11 ($e) {
        $start = $this->run($e['startExp']);
        $end = $this->run($e['endExp']);
        if (!is_numeric($start) || !is_numeric($end)) {
            if (self::$console) echo "wrong start or end of the array index\n";
            return null;
        }
        $start = (int)$start;
        $end = (int)$end;
        $re = array();
        if ($start <= $end) {
            for ($i = $start; $i <= $end; $i++) {
                $re[] = $i;
            }
        } else {
            for ($i = $start; $i >= $end; $i--) {
                $re[] = $i;
            }
        }
        return $re;
    }
    private function _12 ($e) {
        $re = array();
        if (isset($e['tail'])) {
            foreach ($e['tail'] as $t) {
                $re[] = $this->run($t);
            }
        }
        return $re;
    }
    private function _13 ($e) {
        $re = $this->_8($e);
        if (!(!is_string($re) && is_numeric($re))) {
            if (self::$console) echo "[velocity.js] type error: operator '-' is for Number.\n";
            return null;
        }
        return -$re;
    }
    private function _14 ($e) {
        return !(self::bool_of_value($this->run($e['p'])));
    }
    private function _15 ($e) {
        $exp = $this->run($e['exp']);
        if ($e['s'] === '-' && !(!is_string($exp) && is_numeric($exp))) {
            if (self::$console) echo "[velocity.js] type error: -" . var_dump($exp) . "\n";
        }
        return !empty($e['s']) ? ($e['s'] === '!' ? !(self::bool_of_value($exp)) : -$exp) : $exp;
    }
    private function _16 ($e) {
        $re = $this->run($e['head']);
        foreach ($e['tail'] as $t) {
            if (self::bool_of_value($re)) {
                return true;
            }
            $re = $this->run($t[3]);
        }
        return !empty($e['tail']) ? self::bool_of_value($re) : $re;
    }
    private function _17 ($e) {
        $re = $this->run($e['head']);
        foreach ($e['tail'] as $t) {
            if (!self::bool_of_value($re)) {
                return false;
            }
            $re = $this->run($t[3]);
        }
        return !empty($e['tail']) ? self::bool_of_value($re) : $re;
    }
    private function _18 ($e) {
        $re = $this->run($e['head']);
        foreach ($e['tail'] as $t) {
            if ($t[1] === '==') {
                $re = ($re == $this->run($t[3]));
            } elseif ($t[1] === '!=') {
                $re = ($re != $this->run($t[3]));
            }
        }
        return $re;
    }
    private function _19 ($e) {
        $v1 = $this->run($e['head']);
        if (empty($e['tail'])) {
            return $v1;
        }
        $op = $e['tail'][1];
        $exp = $e['tail'][3];
        $v2 = $this->run($exp);
        switch ($op) {
            case '<':
                return $v1 < $v2;
            case '>':
                return $v1 > $v2;
            case '<=':
                return $v1 <= $v2;
            case '>=':
                return $v1 >= $v2;
            default:
                return false;
        }
        return false;
    }
    private function _20 ($e) {
        $re = $this->run($e['head']);
        foreach ($e['tail'] as $t) {
            if ($t[1] === '+') {
                $re += $this->run($t[3]);
            } elseif ($t[1] === '-') {
                $re -= $this->run($t[3]);
            }
        }
        return $re;
    }
    private function _21 ($e) {
        $re = $this->run($e['head']);
        foreach ($e['tail'] as $t) {
            if ($t[1] === '*') {
                $re *= $this->run($t[3]);
            } elseif ($t[1] === '/') {
                $re /= $this->run($t[3]);
            } elseif ($t[1] === '%') {
                $re %= $this->run($t[3]);
            }
        }
        return $re;
    }
    private function _22 ($e) {
        return $this->concat($e['parts']);
    }
};

class Main {
    private $parser;
    private $executor;
    private $cache;
    private $compile_dir;
    private $compile_check;
    private $console = false;

    function __construct ($dir = null, $check = false) {
        $this->parser = new Parser;
        $this->executor = new executor_factory;
        $this->cache = array();

        if (isset($dir) && is_dir($dir)) {
            $this->compile_dir = $dir;
        } else {
            $this->compile_dir = '.';
        }

        $this->compile_check = !!$check;
    }

    private function hash ($path) {
        $h = 't' . hash('md4', $path);
        if ($this->compile_check) {
            $mtime = filemtime($path);
            if (!$mtime) {
                if ($this->console) echo "Fail to get filemtime: $path\n";
            } else {
                $h .= '_' . $mtime;
            }
        }
        return $h;
    }

    public function render ($tmplpath, $data = null, $clear = false) {
        $tid = $this->hash($tmplpath);
        $root = null;
        $compilepath = $this->compile_dir . '/' . $tid . '.php';
        if (is_file($compilepath)) {
            include $compilepath;
        } else {
            try {
                if (isset($this->cache[$tid])) {
                    $root = $this->cache[$tid];
                } else {
                    $tmpl = file_get_contents($tmplpath);
                    if ($tmpl === false) {
                        if ($this->console) echo 'File not found: ' . $tmplpath . "\n";
                        return '';
                    }
                    $root = $this->parser->parse($tmpl);
                    $this->cache[$tid] = &$root;
                }
                file_put_contents($compilepath, "<?php\n" . '$root=' . var_export($root, true) . ";\n?>");
            } catch (SyntaxError $ex) {
                $message = 'Syntax error: ' . $ex->getMessage()
                    . ' At line ' . $ex->grammarLine
                    . ' column ' . $ex->grammarColumn
                    . ' offset ' . $ex->grammarOffset;
                if ($this->console) echo $message . "\n";
            }
        }
        if (isset($data) || $clear) $this->executor->set_data($data, $clear);
        return $this->executor->run($root);
    }
};

?>